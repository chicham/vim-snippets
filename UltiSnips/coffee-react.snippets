#
# CoffeeScript versions -- adapted from coffee-jasmine
# for some ReactJS matchers.
#
priority -50

extends coffee

priority -49

snippet createClass "React define Class" b
${1:classname}Class = React.createClass
	displayName: "$1"
	render: ->
		$2
$1 = React.createFactory($1)

snippet PropTypes "React define propTypes" b
propTypes: ->
	${1:myVar}: React.PropTypes.${2:type}${3:.isRequired}

snippet propType "React propType (key/value)" b
${1:myVar}: React.PropTypes.${2:type}${3:.isRequired}
$4

snippet setState "React setState" b
@setState
	${1:myvar}: ${2:myvalue}
	$3

snippet getInitialState "React define getInitialState" b
getInitialState: ->
	${1:myvar}: ${2:myvalue}
	$3

snippet getDefaultProps "React define getDefaultProps" b
getDefaultProps: ->
	${1:myvar}: ${2:myvalue}
	$3

snippet componentWillMount "React define componentWillMount" b
componentWillMount: ->
	$1

snippet componentDidMount "React define componentDidMount" b
componentDidMount: ->
	$1

snippet componentWillReceiveProps "React define componentWillReceiveProps" b
componentWillReceiveProps: (nextProps) ->
	$1

snippet shouldComponentUpdate "React define shouldComponentUpdate" b
shouldComponentUpdate: (nextProps, nextState) ->
	$1

snippet componentWillUpdate "React define componentWillUpdate" b
componentWillUpdate: (nextProps, nextState) ->
	$1

snippet componentDidUpdate "React define componentDidUpdate" b
componentDidUpdate: (prevProps, prevState) ->
	$1

snippet componentWillUnmount "React define componentWillUnmount" b
componentWillUnmount: ->
	$1
