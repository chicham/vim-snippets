#
# CoffeeScript versions -- adapted from the JS TextMate bundle + additions
# for some jasmine-jquery matchers
#
priority -50

extends coffee

priority -49

snippet des "Describe (coffee)" b
describe '${1:description}', ->
	$0

snippet it "it (coffee)" b
it '${1:description}', ->
	$0

snippet bef "before each (coffee)" b
beforeEach ->
	$0

snippet aft "after each (coffee)" b
afterEach ->
	$0

snippet any "any (coffee)" b
jasmine.any($1)

snippet ru "runs (coffee)" b
runs ->
	$0

snippet wa "waits (coffee)" b
waits($1)

snippet ex "expect (coffee)" b
expect(${1:target})$0

snippet ee "expect to equal (coffee)" b
expect(${1:target}).toEqual(${2:value})

snippet em "expect to match (coffee)" b
expect(${1:target}).toMatch(${2:pattern})

snippet eha "expect to have attribute (coffee)" b
expect(${1:target}).toHaveAttr('${2:attr}'${3:, '${4:value}'})

snippet et "expect to be truthy (coffee)" b
expect(${1:target}).toBeTruthy()

snippet ef "expect to be falsy (coffee)" b
expect(${1:target}).toBeFalsy()

snippet ed "expect to be defined (coffee)" b
expect(${1:target}).toBeDefined()

snippet en "expect to be null (coffee)" b
expect(${1:target}).toBeNull()

snippet ec "expect to contain (coffee)" b
expect(${1:target}).toContain(${2:value})

snippet ev "expect to be visible (coffee)" b
expect(${1:target}).toBeVisible()

snippet eh "expect to be hidden (coffee)" b
expect(${1:target}).toBeHidden()

snippet notx "expect not (coffee)" b
expect(${1:target}).not$0

snippet note "expect not to equal (coffee)" b
expect(${1:target}).not.toEqual(${2:value})

snippet notm "expect not to match (coffee)" b
expect(${1:target}).not.toMatch(${2:pattern})

snippet notha "expect to not have attribute (coffee)" b
expect(${1:target}).not.toHaveAttr('${2:attr}'${3:, '${4:value}'})

snippet nott "expect not to be truthy (coffee)" b
expect(${1:target}).not.toBeTruthy()

snippet notf "expect not to be falsy (coffee)" b
expect(${1:target}).not.toBeFalsy()

snippet notd "expect not to be defined (coffee)" b
expect(${1:target}).not.toBeDefined()

snippet notn "expect not to be null (coffee)" b
expect(${1:target}).not.toBeNull()

snippet notc "expect not to contain (coffee)" b
expect(${1:target}).not.toContain(${2:value})

snippet notv "expect not to be visible (coffee)" b
expect(${1:target}).not.toBeVisible()

snippet noth "expect not to be hidden (coffee)" b
expect(${1:target}).not.toBeHidden()

snippet s "spy on (coffee)" b
spyOn(${1:object}, "${2:method}")$0

snippet sr "spy on and return (coffee)" b
spyOn(${1:object}, "${2:method}").andReturn(${3:arguments})

snippet st "spy on and throw (coffee)" b
spyOn(${1:object}, "${2:method}").andThrow(${3:exception})

snippet sct "spy on and call through (coffee)" b
spyOn(${1:object}, "${2:method}").andCallThrough()

snippet scf "spy on and call fake (coffee)" b
spyOn(${1:object}, "${2:method}").andCallFake(${3:function})

snippet esc "expect was called (coffee)" b
expect(${1:target}).wasCalled()

snippet escw "expect was called with (coffee)" b
expect(${1:target}).wasCalledWith(${2:arguments})

snippet notsc "expect was not called (coffee)" b
expect(${1:target}).wasNotCalled()

snippet noscw "expect was not called with (coffee)" b
expect(${1:target}).wasNotCalledWith(${2:arguments})
