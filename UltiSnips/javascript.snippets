priority -50

############
#  COMMON  #
############

# The smart snippets use a global options called
# "g:ultisnips_javascript.{option}" which can control the format
# of trailing semicolon, space before function paren, etc.
#
# e.g.
# let g:ultisnips_javascript = {
#      \ 'keyword-spacing': 'always',
#      \ 'semi': 'never',
#      \ 'space-before-function-paren': 'always',
#      \ }


global !p
from javascript_snippets import (
	semi, space_before_function_paren, keyword_spacing
)
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet get "Get Elements"
getElement${1/(T)|(C)|.*/(?1:s)(?2:s)/}By${1:T}${1/(T)|(I)|(C).*/(?1:agName)(?2:d)(?3:lassName)/}('$2')

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function`!p snip.rv = space_before_function_paren(snip)`(element) {
	$TM_SELECTED_TEXT$0
}${10:,}

snippet :f "Object Method"
${1:method_name}: function`!p snip.rv = space_before_function_paren(snip)`(${3:attribute}) {
	$TM_SELECTED_TEXT$0
}${10:,}

snippet :, "Object Value JS"
${1:value_name}: ${0:value},

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function`!p snip.rv = space_before_function_paren(snip)`(${3:first_argument}) {
	$TM_SELECTED_TEXT$0
}`!p snip.rv = semi(snip)`


snippet fun "function (named)" b
function ${1:function_name}`!p snip.rv = space_before_function_paren(snip)`(${2:argument}) {
	$TM_SELECTED_TEXT$0
}

snippet vf "function (assigned to var)"
${1:var }${2:function_name} = function $2`!p snip.rv = space_before_function_paren(snip)`($3) {
	$TM_SELECTED_TEXT$0
}`!p snip.rv = semi(snip)`

# Drop priority so this only triggers when not beginning of line.
priority -51
snippet fun "function (anonymous)" w
function`!p snip.rv = space_before_function_paren(snip)`($1) {
	$TM_SELECTED_TEXT$0
}$2
priority -50

snippet anf "function (anonymous)" i
function`!p snip.rv = space_before_function_paren(snip)`($1) {
	$TM_SELECTED_TEXT$0
}

snippet iife "Immediately-Invoked Function Expression (iife)"
(function`!p snip.rv = space_before_function_paren(snip)`(${1:window}) {
	$TM_SELECTED_TEXT$0
}(${2:$1}))`!p snip.rv = semi(snip)`

snippet ;fe "Minify safe iife"
;(function`!p snip.rv = space_before_function_paren(snip)`(${1}) {
	$TM_SELECTED_TEXT$0
}(${2}))

snippet timeout "setTimeout function"
setTimeout(function`!p snip.rv = space_before_function_paren(snip)`() {
	$TM_SELECTED_TEXT$0
}${2:.bind(${3:this})}, ${1:10})`!p snip.rv = semi(snip)`

snippet fi "for prop in obj using hasOwnProperty" b
for`!p snip.rv = keyword_spacing(snip)`(${1:prop} in ${2:obj}){
	if`!p snip.rv = keyword_spacing(snip)`($2.hasOwnProperty($1)) {
		$TM_SELECTED_TEXT$0
	}
}

snippet if "if (condition) { ... }"
if`!p snip.rv = keyword_spacing(snip)`(${1:true}) {
	$TM_SELECTED_TEXT$0
}

snippet ife "if (condition) { ... } else { ... }"
if`!p snip.rv = keyword_spacing(snip)`(${1:true}) {
	$TM_SELECTED_TEXT$0
}`!p snip.rv = keyword_spacing(snip)`else`!p snip.rv = keyword_spacing(snip)`{
	${2}
}

snippet switch
switch`!p snip.rv = keyword_spacing(snip)`($TM_SELECTED_TEXT${1:expression}) {
	case '$TM_SELECTED_TEXT${3:case}':
		${4}
		break`!p snip.rv = semi(snip)`
	${0}
	default:
		${2}
}

snippet case "case 'xyz': ... break"
case`!p snip.rv = keyword_spacing(snip)`'$TM_SELECTED_TEXT${1:case}':
	$TM_SELECTED_TEXT$0
	break`!p snip.rv = semi(snip)`

snippet do "do { ... } while (condition)"
do`!p snip.rv = keyword_spacing(snip)`{
	$TM_SELECTED_TEXT$0
}`!p snip.rv = keyword_spacing(snip)`while`!p snip.rv = keyword_spacing(snip)`(${1:/* condition */})`!p snip.rv = semi(snip)`

snippet ret "Return statement"
return $TM_SELECTED_TEXT$0`!p snip.rv = semi(snip)`

snippet us
'use strict'`!p snip.rv = semi(snip)`

snippet imp "import"
import ${2} from ${1}

# Debugging
snippet de
debugger`!p snip.rv = semi(snip)`
snippet cl "console.log"
console.log(${0})`!p snip.rv = semi(snip)`
snippet cd "console.debug"
console.debug(${0})`!p snip.rv = semi(snip)`
snippet ce "console.error"
console.error(${0})`!p snip.rv = semi(snip)`
snippet cw "console.warn"
console.warn(${0})`!p snip.rv = semi(snip)`
snippet ci "console.info"
console.info(${0})`!p snip.rv = semi(snip)`
snippet ct "console.trace"
console.trace(${0:label})`!p snip.rv = semi(snip)`
snippet ctime "console.time ... console.timeEnd"
console.time("${1:label}")`!p snip.rv = semi(snip)`
${0:$TM_SELECTED_TEXT}
console.timeEnd("$1")`!p snip.rv = semi(snip)`
snippet ctimestamp "console.timeStamp"
console.timeStamp("${1:label}")`!p snip.rv = semi(snip)`
snippet ca "console.assert"
console.assert(${1:expression}, ${0:obj})`!p snip.rv = semi(snip)`
snippet cclear "console.clear"
console.clear()`!p snip.rv = semi(snip)`
snippet cdir "console.dir"
console.dir(${0:obj})`!p snip.rv = semi(snip)`
snippet cdirx "console.dirxml"
console.dirxml(${1:object})`!p snip.rv = semi(snip)`
snippet cgroup "console.group"
console.group("${1:label}")`!p snip.rv = semi(snip)`
${0:$TM_SELECTED_TEXT}
console.groupEnd()`!p snip.rv = semi(snip)`
snippet cgroupc "console.groupCollapsed"
console.groupCollapsed("${1:label}")`!p snip.rv = semi(snip)`
${0:$TM_SELECTED_TEXT}
console.groupEnd()`!p snip.rv = semi(snip)`
snippet cprof "console.profile"
console.profile("${1:label}")`!p snip.rv = semi(snip)`
${0:$TM_SELECTED_TEXT}
console.profileEnd()`!p snip.rv = semi(snip)`
snippet ctable "console.table"
console.table(${1:"${2:value}"})`!p snip.rv = semi(snip)`
snippet clstr "console.log stringified"
console.log(JSON.stringify(${0}, null, 2))`!p snip.rv = semi(snip)`

# vim:ft=snippets:
