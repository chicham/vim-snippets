# Simple shortcuts

priority -50

snippet imp "import (imp)" b
import ${1:std.stdio};

snippet pimp "public import (pimp)" b
public import ${1:/*module*/};

snippet over "override (over)" b
override ${1:/*function*/}

snippet al "alias (al)"
alias ${1:/*orig*/} ${2:/*alias*/};

snippet mixin "mixin (mixin)" b
mixin ${1:/*mixed_in*/} ${2:/*name*/};

snippet new "new (new)"
new $1($2);

snippet scpn "@safe const pure nothrow (scpn)"
@safe const pure nothrow

snippet spn "@safe pure nothrow (spn)"
@safe pure nothrow

snippet cont "continue (cont)"
continue;

snippet dis "@disable (dis)" b
@disable ${1:/*method*/};

snippet pub "public (pub)" b
public:
	${1:/*members*/}

snippet priv "private (priv)" b
private:
	${1:/*members*/}

snippet prot "protected (prot)" b
protected:
	${1:/*members*/}

snippet pack "package (pack)" b
package:
	${1:/*members*/}

snippet ret "return (ret)"
return ${1:/*value to return*/};

snippet auto "auto (auto)" b
auto ${1:/*variable*/} = ${2:/*value*/};

snippet con "const (con)" b
const ${1:/*variable*/} = ${2:/*value*/};

snippet siz "size_t (siz)" b
size_t ${1:/*variable*/} = ${2:/*value*/};

snippet sup "super (sup)" b
super(${1:/*args*/});

# Phobos

snippet tup "tuple (tup)"
tuple(${1:/*args*/})

snippet wr "writeln (wr)"
writeln(${1:/*args*/});

snippet to "to (to)"
to!(${1:/*type*/})(${2:/*arg*/})

snippet enf "enforce (enf)" b
enforce(${1:/*condition*/},
	new $2Exception(${3:/*args*/}));

# Branches

snippet if "if .. (if)"
if(${1:/*condition*/})
{
	$TM_SELECTED_TEXT$0
}

snippet ife "if .. else (ife)" b
if(${1:/*condition*/})
{
	$2
}
else
{
	${3:/*else*/}
}

snippet el "else (el)" b
else
{
	$TM_SELECTED_TEXT$1
}

snippet elif "else if (elif)" b
else if(${1:/*condition*/})
{
	$TM_SELECTED_TEXT$0
}

snippet sw "switch (sw)"
switch(${1:/*var*/})
{
	case ${2:/*value*/}:
		$3
		break;
	case ${4:/*value*/}:
		$5
		break;
	${7:/*more cases*/}
	default:
		${6:assert(false);}
}

snippet fsw "final switch (fsw)"
final switch(${1:/*var*/})
{
	case ${2:/*value*/}:
		$3
		break;
	case ${4:/*value*/}:
		$5
		break;
	${7:/*more cases*/}
}

snippet case "case (case)" b
case ${1:/*value*/}:
	$2
	break;

snippet ?: "ternary operator (?:)"
${1:/*condition*/} ? ${2:/*then*/} : ${3:/*else*/}$4

# Loops

snippet do "do while (do)" b
do
{
	$TM_SELECTED_TEXT$2
} while(${1:/*condition*/});

snippet wh "while (wh)" b
while(${1:/*condition*/})
{
	$TM_SELECTED_TEXT$2
}

snippet for "for (for)" b
for (${4:size_t} ${2:i} = 0; $2 < ${1:count}; ${3:++$2})
{
	$TM_SELECTED_TEXT$0
}

snippet forever "forever (forever)" b
for(;;)
{
	$TM_SELECTED_TEXT$0
}

snippet fore "foreach (fore)"
foreach(${1:/*elem*/}; ${2:/*range*/})
{
	$TM_SELECTED_TEXT$3
}

snippet forif "foreach if (forif)" b
foreach(${1:/*elem*/}; ${2:/*range*/}) if(${3:/*condition*/})
{
	$TM_SELECTED_TEXT$4
}

# Contracts
snippet in "in contract (in)" b
in
{
	assert(${1:/*condition*/}, "${2:error message}");
	$3
}
body

snippet out "out contract (out)" b
out${1:(result)}
{
	assert(${2:/*condition*/}, "${3:error message}");
	$4
}
body

snippet inv "invariant (inv)" b
invariant()
{
	assert(${1:/*condition*/}, "${2:error message}");
	$3
}

# Functions (generic)

snippet fun "function definition (fun)"
${1:void} ${2:/*function name*/}(${3:/*args*/}) ${4:@safe pure nothrow}
{
	$TM_SELECTED_TEXT$5
}

snippet void "void function definition (void)"
void ${1:/*function name*/}(${2:/*args*/}) ${3:@safe pure nothrow}
{
	$TM_SELECTED_TEXT$4
}

snippet this "ctor (this)" w
this(${1:/*args*/})
{
	$TM_SELECTED_TEXT$2
}

snippet get "getter property (get)"
@property ${1:/*type*/} ${2:/*member_name*/}() const pure nothrow {return ${3:$2_};}

snippet set "setter property (set)"
@property void ${1:/*member_name*/}(${2:/*type*/} rhs) pure nothrow {${3:$1_} = rhs;}

# Functions (concrete)

snippet main "Main" b
void main(string[] args)
{
	$TM_SELECTED_TEXT${0: /*code*/}
}

# Mixins

snippet signal "signal (signal)" b
mixin Signal!(${1:/*args*/}) ${2:/*name*/};

# Scope

snippet scope "scope (scope)" b
scope(${1:exit})
{
	$TM_SELECTED_TEXT$2
}

# With

snippet with "with (with)"
with($1)
{
	$TM_SELECTED_TEXT$2
}

# Exception handling

snippet try "try/catch (try)" b
try
{
	$TM_SELECTED_TEXT${1:/*code to try*/}
}
catch($2Exception e)
{
	${3:/*handle exception*/}
}

snippet tryf "try/catch/finally (tryf)" b
try
{
	$TM_SELECTED_TEXT${1:/*code to try*/}
}
catch($2Exception e)
{
	${3:/*handle exception*/}
}
finally
{
	${4:/*cleanup*/}
}

snippet catch "catch (catch)" b
catch($1Exception e)
{
	${2:/*handle exception*/}
}

snippet thr "throw (thr)"
throw new $1Exception("$2");


# Type declarations

snippet struct "struct (struct)"
struct ${1:`!p snip.rv = (snip.basename or "name")`}
{
	$2
}

snippet union "union (union)"
union ${1:`!p snip.rv = (snip.basename or "name")`}
{
	$2
}

snippet class "class (class)"
class ${1:`!p snip.rv = (snip.basename or "name")`}
{
	$2
}

snippet inter "interface (inter)"
interface ${1:`!p snip.rv = (snip.basename or "name")`}
{
	$2
}

snippet enum "enum (enum)"
enum ${1:`!p snip.rv = (snip.basename or "name")`}
{
	$2
}


# Exception declarations

snippet exc "exception declaration (exc)" b
/// ${3:/*documentation*/}
class $1Exception : $2Exception
{
	public this(string msg, string file = __FILE__, int line = __LINE__)
	{
		super(msg, file, line);
	}
}


# Conditional compilation

snippet version "version (version)" b
version(${1:/*version name*/})
{
	$TM_SELECTED_TEXT$2
}

snippet debug "debug" b
debug
{
	$TM_SELECTED_TEXT$1
}


# Templates

snippet temp "template (temp)" b
template ${2:/*name*/}(${1:/*args*/})
{
	$3
}


# Asserts

snippet ass "assert (ass)" b
assert(${1:false}, "${2:TODO}");



# Unittests

snippet unittest "unittest (unittest)" b
unittest
{
	$1
}


# Common member functions

snippet opDis "opDispatch (opDis)" b
${1:/*return type*/} opDispatch(string s)()
{
	$2;
}

snippet op= "opAssign (op=)" b
void opAssign($1 rhs) ${2:@safe pure nothrow}
{
	$2
}

snippet opCmp "opCmp (opCmp)" b
int opCmp($1 rhs) @safe const pure nothrow
{
	$2
}

snippet opApply "opApply (opApply)" b
int opApply(int delegate(ref ${1:/*iterated type/s*/}) dg)
{
	int result = 0;
	${2:/*loop*/}
	{
		result = dg(${3:/*arg/s*/});
		if(result){break;}
	}
	return result;
}

snippet toString "toString (toString)" b
string toString() @safe const pure nothrow
{
	$1
}


# Comments


snippet todo "TODO (todo)"
// TODO: $1


# DDoc

snippet doc "generic ddoc block (doc)" b
/// ${1:description}
///
/// ${2:details}

snippet fdoc "function ddoc block (fdoc)" b
/// ${1:description}
///
/// ${2:Params:  ${3:param} = ${4:param description}
///			 $5}
///
/// ${6:Returns: ${7:return value}}
///
/// ${8:Throws:  $9Exception $10}

snippet Par "Params (Par)"
Params:  ${1:param} = ${2:param description}
///			$3

snippet Ret "Returns (Ret)"
Returns:  ${1:return value/s}

snippet Thr "Throws (Thr)"
Throws:  $1Exception $2

snippet Example "Examples (Example)"
Examples:
/// --------------------
/// ${1:example code}
/// --------------------


# License blocks

snippet gpl "GPL (gpl)" b
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//
// Copyright (C) ${1:Author}, `!v strftime("%Y")`

$2

snippet boost "Boost (boost)" b
//          Copyright ${1:Author} `!v strftime("%Y")`.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

$2


# New module

snippet module "New module (module)" b
//          Copyright ${1:Author} `!v strftime("%Y")`.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

module $2.`!v vim_snippets#Filename('$1', 'name')`;


$3
